@page "/agents/{AgentId}"
@using BlazorAIFoundryAgentsCatalog.Client.DTOs
@using BlazorAIFoundryAgentsCatalog.Client.Helpers
@using BlazorAIFoundryAgentsCatalog.Client.Services
@using Markdig
@inject IAgentCatalogService AgentCatalogService
@inject IAgentChatService AgentChatService

<PageTitle>Agent Chat</PageTitle>

<MudPaper Class="pa-4" Elevation="0">
    @if (isAgentInfoLoading)
    {
        <MudSkeleton Height="32px" Width="240px" Animation="Animation.Wave" Class="mb-2" />
        <MudSkeleton Height="20px" Width="80%" Animation="Animation.Wave" Class="mb-4" />
    }
    else
    {
        <MudText Typo="Typo.h5" GutterBottom="true">Chat with Agent @agentName</MudText>
        @if (!string.IsNullOrWhiteSpace(agentDescription))
        {
            <MudText Typo="Typo.body1" Class="mb-4" Color="Color.Secondary">
                @agentDescription
            </MudText>
        }

        <div id="chatMessages" style="height:60vh; width:100%; overflow-y:auto;" class="mb-4">
            @if (messages is null)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!messages.Any())
            {
                <MudChat ChatPosition="ChatBubblePosition.Start">
                    <MudChatBubble Avatar="@Icons.Material.Filled.SupportAgent">
                        No messages yet. Say hi!
                    </MudChatBubble>
                </MudChat>
            }
            else
            {
                @foreach (var m in messages)
                {
                    <MudChat UserName="@(m.Role == "user" ? "You" : "Agent")"
                             UserAvatar="@(m.Role == "user" ? Icons.Material.Filled.Person : Icons.Material.Filled.SupportAgent)"
                             ChatPosition="@(m.Role == "user" ? ChatBubblePosition.End : ChatBubblePosition.Start)">
                        <MudAvatar>@(m.Role == "user" ? "You" : StringHelper.GetInitials(agentName))</MudAvatar>
                        <MudChatBubble Time="@m.Timestamp.ToLocalTime().ToString("g")" Class="mud-chatbubble">
                            @((MarkupString)ConvertMarkdownToHtml(@m.Content))
                        </MudChatBubble>
                    </MudChat>
                }
                @if (isLoading)
                {
                    <MudChat ChatPosition="ChatBubblePosition.Start" UserName="Agent" UserAvatar="@Icons.Material.Filled.SupportAgent">
                        <MudAvatar>@StringHelper.GetInitials(agentName)</MudAvatar>
                        <MudChatBubble>
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" />
                            <span>Agent is typing...</span>
                        </MudChatBubble>
                    </MudChat>
                }
            }
        </div>

        <MudStack Direction="Row" Spacing="1">
            <MudTextField @bind-Value="currentText"
                          Placeholder="Type a message..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Edit"
                          FullWidth="true"
                          OnKeyDown="OnInputKeyDown" />
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="SendAndRefreshHistory"
                       Disabled="@isLoading">
                Send
            </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    [Parameter]
    public string AgentId { get; set; } = string.Empty;

    private List<ChatMessageDto>? messages;
    private string threadId = string.Empty;
    private string currentText = string.Empty;
    private bool isLoading = false;
    private string agentName = string.Empty;
    private string agentDescription = string.Empty;
    private bool isAgentInfoLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        isAgentInfoLoading = true;
        var agent = await AgentCatalogService.GetAgentAsync(AgentId);
        agentName = agent.Name;
        agentDescription = agent.Description ?? string.Empty;
        isAgentInfoLoading = false;

        await ResetAgentContext();
    }

    private Task ResetAgentContext()
    {
        return Task.Run(() =>
        {
            isLoading = true;
            messages = new();
            threadId = string.Empty;
            isLoading = false;
            StateHasChanged();
        });
    }

    private async Task SendAndRefreshHistory()
    {
        if (string.IsNullOrWhiteSpace(currentText)) return;

        isLoading = true;

        var userPrompt = currentText;

        // Optimistically add the user's message
        var userMsg = new ChatMessageDto(
            AgentId: AgentId,
            Role: "user",
            Content: userPrompt,
            Timestamp: DateTime.UtcNow
        );
        currentText = string.Empty;
        messages ??= new List<ChatMessageDto>();
        messages.Add(userMsg);
        StateHasChanged();

        var chatThread = await AgentChatService.SendMessageAndGetHistoryAsync(AgentId, userPrompt, threadId);
        if (chatThread is not null)
        {
            messages = chatThread.Messages;
            StateHasChanged();
            if (string.IsNullOrWhiteSpace(threadId))
            {
                threadId = chatThread.ThreadId;
            }
        }

        isLoading = false;
    }

    private async Task OnInputKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await SendAndRefreshHistory();
        }
    }

    private record MessageGroup(string Role, List<ChatMessageDto> Messages);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (messages is not null && messages.Count > 0)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                var el = document.getElementById('chatMessages');
                if (el) el.scrollTop = el.scrollHeight;
            ");
        }
    }

    private string ConvertMarkdownToHtml(string markdownContent)
    {
        var pipeline = new MarkdownPipelineBuilder()
           .UsePipeTables()
           .Build();

        return Markdown.ToHtml(markdownContent, pipeline).Replace("<table>", "<table class=\"markdown-table\">");
    }
}